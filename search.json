[{"path":"https://b-nilson.github.io/airquality/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Brayden Nilson Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://b-nilson.github.io/airquality/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Brayden Nilson. Maintainer.","code":""},{"path":"https://b-nilson.github.io/airquality/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nilson B (2025). airquality: Gather, Standardize, Analyze Air Quality Data. R package version 0.1.0, https://github.com/B-Nilson/airquality.","code":"@Manual{,   title = {airquality: Gather, Standardize, and Analyze Air Quality Data},   author = {Brayden Nilson},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/B-Nilson/airquality}, }"},{"path":"https://b-nilson.github.io/airquality/index.html","id":"airquality-","dir":"","previous_headings":"","what":"Gather, Standardize, and Analyze Air Quality Data","title":"Gather, Standardize, and Analyze Air Quality Data","text":"goal airquality reduce burden gathering, standardizing, analyzing air quality data. package much work progress, significant changes occur gaurentee things work expected.","code":""},{"path":"https://b-nilson.github.io/airquality/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Gather, Standardize, and Analyze Air Quality Data","text":"can install development version airquality GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"B-Nilson/airquality\")"},{"path":"https://b-nilson.github.io/airquality/index.html","id":"utilities","dir":"","previous_headings":"","what":"Utilities","title":"Gather, Standardize, and Analyze Air Quality Data","text":"useful functions working air quality data.","code":"library(airquality)  # Convert between units convert_units(c(-20, 0, 20), in_unit = \"degC\", out_unit = \"degF\") convert_units(c(0, 50, 100), in_unit = \"ppm\", out_unit = \"ppb\", keep_units = FALSE)"},{"path":[]},{"path":"https://b-nilson.github.io/airquality/index.html","id":"federal-equivalent-method-fem-data","dir":"","previous_headings":"Data Collection","what":"Federal Equivalent Method (FEM) Data","title":"Gather, Standardize, and Analyze Air Quality Data","text":"’s can get regulatory FEM airquality data. data considered “gold standard” realtime observations. Due upfront maintenance costs stations tend prioritized areas people.","code":"library(airquality)  # All FEM data sources for (a) location(s) get_station_data(\"Prince George, BC, Canada\",   date_range = c(\"2023-01-01 00\", \"2023-01-03 23\"),   networks = \"FEM\")  # AirNow (US + Partner Agencies) only for (a) specific station(s) stations = get_airnow_stations() get_airnow_data(stations$site_id[1],   date_range = c(\"2023-01-01 00\", \"2023-01-03 23\"))  # BC Gov. (Canada) only for (a) specific station(s) stations = get_bcgov_stations() get_bcgov_data(stations$site_id[1],   date_range = c(\"2023-01-01 00\", \"2023-01-03 23\"))  # AB Gov. (Canada) only for (a) specific station(s)  stations = get_abgov_stations() get_abgov_data(stations$site_id[1],   date_range = c(\"2023-01-01 00\", \"2023-01-03 23\"))"},{"path":"https://b-nilson.github.io/airquality/index.html","id":"low-cost-monitor-lcm-data","dir":"","previous_headings":"Data Collection","what":"Low-cost Monitor (LCM) Data","title":"Gather, Standardize, and Analyze Air Quality Data","text":"’s can get LCM airquality data. monitors accurate FEM counterparts, due significantly lower cost can installed locations. Caution recommended ensure unrealistic observations properly flagged removed analysis.","code":"library(airquality)  # All LCM networks for (a) location(s) get_station_data(   \"Prince George, BC, Canada\",   date_range = c(\"2023-01-01 00\", \"2023-01-03 23\"),   networks = \"LCM\")  # PurpleAir (Global) [under development] read_key = \"YOUR-API-KEY\" # see develop.purpleair.com stations = get_purpleair_stations(\"Prince George, BC, Canada\", api_key = read_key) get_purpleair_data(   stations$site_id[1],   date_range = c(\"2023-01-01 00\", \"2023-01-03 23\"),   api_key = read_key)  # AQEgg (Global?) [to come]  # Clarity (Global?) [to come]"},{"path":"https://b-nilson.github.io/airquality/index.html","id":"air-quality-standards-under-development","dir":"","previous_headings":"","what":"Air Quality Standards [under development]","title":"Gather, Standardize, and Analyze Air Quality Data","text":"Air quality managers organizations set standards used assess air quality impacts region. ways can calculate standards observation data:","code":"library(airquality)  # Canadian AQHI AQHI(pm25 = 25, o3 = 70, no2 = 20) AQHI_plus(pm25 = 25)  # Canadian Ambient Air Quality Standards  CAAQS(...)  # United States AQI AQI(pm25 = 20, o3 = 70, no2 = 20) AQI(pm25 = 25)"},{"path":"https://b-nilson.github.io/airquality/index.html","id":"analysis-plots-under-development","dir":"","previous_headings":"","what":"Analysis Plots [under development]","title":"Gather, Standardize, and Analyze Air Quality Data","text":"ways can make useful analysis plots built using ggplot2:","code":"library(airquality)  # Taylor Diagrams taylor_diagram(...)  # Wind Roses wind_rose(...)"},{"path":"https://b-nilson.github.io/airquality/reference/AQI.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the US AQI from pollutant observations — AQI","title":"Calculate the US AQI from pollutant observations — AQI","text":"Air Quality Index (AQI) used reporting air quality United States, focuses short term health effects result breathing polluted air. AQI calculated separately 5 pollutants: ozone (O3), particulate matter (PM2.5 PM10), carbon monoxide (CO), sulfur dioxide (SO2), nitrogen dioxide (NO2) based maximum values (various averaging periods) particular day. highest AQI value among pollutants value day recorded AQI corresponding pollutant reported principal pollutant. US EPA established risk categories associated health messaging AQI ranges including: \"Good\" (0-50), \"Moderate\" (51-100), \"Unhealthy Sensitive Groups\" (101-150), \"Unhealthy\" (151-200), \"Unhealthy\" (200-300), \"Hazardous\" (301-500). AQI values 500 considered \"Beyond AQI\", AQI values still calculated relative comparisons.","code":""},{"path":"https://b-nilson.github.io/airquality/reference/AQI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the US AQI from pollutant observations — AQI","text":"","code":"AQI(   dates = Sys.time(),   o3_8hr_ppm = NA,   o3_1hr_ppm = NA,   pm25_24hr_ugm3 = NA,   pm25_1hr_ugm3 = NA,   pm10_24hr_ugm3 = NA,   pm10_1hr_ugm3 = NA,   co_8hr_ppm = NA,   co_1hr_ppm = NA,   so2_1hr_ppb = NA,   no2_1hr_ppb = NA )"},{"path":"https://b-nilson.github.io/airquality/reference/AQI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the US AQI from pollutant observations — AQI","text":"dates Vector hourly dates corresponding observations. Date gaps filled automatically. o3_8hr_ppm (Optional) Numeric vector hourly 8-hour mean ozone (O3) concentrations (ppm). calculated o3_1hr_ppm provided o3_8hr_ppm provided. o3_1hr_ppm (Optional) Numeric vector hourly 1-hour mean ozone (O3) concentrations (ppm). pm25_24hr_ugm3 (Optional) Numeric vector hourly 24-hour mean fine particulate matter (PM2.5) concentrations (ug/m^3). calculated pm25_1hr_ugm3 provided pm25_24hr_ugm3 provided. pm25_1hr_ugm3 (Optional) Numeric vector hourly 1-hour mean fine particulate matter (PM2.5) concentrations (ug/m^3). pm10_24hr_ugm3 (Optional) Numeric vector hourly 24-hour mean coarse particulate matter (PM10) concentrations (ug/m^3). calculated pm10_1hr_ugm3 provided pm10_24hr_ugm3 provided. pm10_1hr_ugm3 (Optional) Numeric vector hourly 1-hour mean coarse particulate matter (PM10) concentrations (ug/m^3). co_8hr_ppm (Optional) Numeric vector hourly 8-hour mean carbon monoxide (CO) concentrations (ppm). calculated co_1hr_ppm provided co_8hr_ppm provided. co_1hr_ppm (Optional) Numeric vector hourly 1-hour mean carbon monoxide (CO) concentrations (ppm). so2_1hr_ppb (Optional) Numeric vector hourly 1-hour mean sulfur dioxide (SO2) concentrations (ppb). 24-hour averages calculated automatically. no2_1hr_ppb (Optional) Numeric vector hourly 1-hour mean nitrogen dioxide (NO2) concentrations (ppb).","code":""},{"path":"https://b-nilson.github.io/airquality/reference/AQI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the US AQI from pollutant observations — AQI","text":"tibble (data.frame) columns: date, AQI, risk_category, principal_pol 1 row day min max values provided dates","code":""},{"path":[]},{"path":"https://b-nilson.github.io/airquality/reference/AQI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the US AQI from pollutant observations — AQI","text":"","code":"AQI(o3_8hr_ppm = 0.078, o3_1hr_ppm = 0.104, pm25_24hr_ugm3 = 35.9) #> # A tibble: 1 × 4 #>   date                  AQI risk_category                  principal_pol #>   <dttm>              <dbl> <fct>                          <fct>         #> 1 2025-10-10 00:00:00   126 Unhealthy for Sensitive Groups o3            AQI(o3_1hr_ppm = 0.104, pm25_24hr_ugm3 = 35.9) #> # A tibble: 1 × 4 #>   date                  AQI risk_category                  principal_pol #>   <dttm>              <dbl> <fct>                          <fct>         #> 1 2025-10-10 00:00:00   102 Unhealthy for Sensitive Groups pm25"},{"path":"https://b-nilson.github.io/airquality/reference/CAAQS.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess the attainment of the Canadian Ambient Air Quality Standards (CAAQS) — CAAQS","title":"Assess the attainment of the Canadian Ambient Air Quality Standards (CAAQS) — CAAQS","text":"Canadian Ambient Air Quality Standards (CAAQS) part collaborative national Air Quality Management System (AQMS), better protect human health environment. Standards various averaging periods defined fine particulate matter (PM2.5), ozone (O3), nitrogen dioxide (NO2), sulphur dioxide (SO2), typically updated ever 5 years. Management levels (Green -> Yellow -> Orange -> Red) defined pollutant standard. \"Red\" level indicates exceedance CAAQS management plans typically developed regions \"Orange\" worse levels.","code":""},{"path":"https://b-nilson.github.io/airquality/reference/CAAQS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess the attainment of the Canadian Ambient Air Quality Standards (CAAQS) — CAAQS","text":"","code":"CAAQS(   dates,   pm25_1hr_ugm3 = NULL,   o3_1hr_ppb = NULL,   no2_1hr_ppb = NULL,   so2_1hr_ppb = NULL,   min_completeness = 0.5 )"},{"path":"https://b-nilson.github.io/airquality/reference/CAAQS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess the attainment of the Canadian Ambient Air Quality Standards (CAAQS) — CAAQS","text":"dates Vector hourly datetime values corresponding observations. Date gaps filled automatically. pm25_1hr_ugm3 (Optional). Vector hourly mean fine particulate matter (PM2.5) concentrations (ug/m^3). o3_1hr_ppb (Optional). Vector hourly mean ozone (O3) concentrations (ppb). no2_1hr_ppb (Optional). Vector hourly mean nitrogen dioxide (NO2) concentrations (ppb). so2_1hr_ppb (Optional). Vector hourly mean sulphur dioxide (SO2) concentrations (ppb). min_completeness single value 0 1 indicating required annual data completeness pollutant. Default 0.5 (50 percent).","code":""},{"path":"https://b-nilson.github.io/airquality/reference/CAAQS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess the attainment of the Canadian Ambient Air Quality Standards (CAAQS) — CAAQS","text":"list tibbles (data.frames), one tibble per pollutant provided annual CAAQS metrics management levels","code":""},{"path":"https://b-nilson.github.io/airquality/reference/CAAQS.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Assess the attainment of the Canadian Ambient Air Quality Standards (CAAQS) — CAAQS","text":"https://ccme.ca/en/air-quality-report","code":""},{"path":[]},{"path":"https://b-nilson.github.io/airquality/reference/CAAQS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess the attainment of the Canadian Ambient Air Quality Standards (CAAQS) — CAAQS","text":"","code":"obs <- data.frame(   date = seq(     lubridate::ymd_h(\"2020-01-01 00\"),     lubridate::ymd_h(\"2023-12-31 23\"), \"1 hours\"   ),   pm25 = sample(1:150, 35064, TRUE), o3 = sample(1:150, 35064, TRUE),   no2 = sample(1:150, 35064, TRUE), so2 = sample(1:150, 35064, TRUE) ) CAAQS(   dates = obs$date, pm25_1hr_ugm3 = obs$pm25,   o3_1hr_ppb = obs$o3, no2_1hr_ppb = obs$no2, so2_1hr_ppb = obs$so2 ) #> $pm25 #> # A tibble: 4 × 7 #>    year perc_98_of_daily_means `3yr_mean_of_perc_98` management_level_daily #>   <dbl>                  <dbl>                 <dbl> <chr>                  #> 1  2020                   95.4                  NA   NA                     #> 2  2021                   94.9                  NA   NA                     #> 3  2022                   94.1                  94.8 Red                    #> 4  2023                   95.6                  94.9 Red                    #> # ℹ 3 more variables: mean_of_daily_means <dbl>, `3yr_mean_of_means` <dbl>, #> #   management_level_annual <chr> #>  #> $o3 #> # A tibble: 4 × 4 #>    year fourth_highest_daily_max_8hr_mean_o3 `3yr_mean` management_level_8hr #>   <dbl>                                <dbl>      <dbl> <chr>                #> 1  2020                                 118.        NA  NA                   #> 2  2021                                 116.        NA  NA                   #> 3  2022                                 114.       116. Red                  #> 4  2023                                 116.       115. Red                  #>  #> $no2 #> # A tibble: 4 × 6 #>    year annual_mean_of_hourly management_level_hourly perc_98_of_daily_maxima #>   <dbl>                 <dbl> <chr>                                     <dbl> #> 1  2020                  75.6 Red                                         150 #> 2  2021                  75.8 Red                                         150 #> 3  2022                  75.9 Red                                         150 #> 4  2023                  76.1 Red                                         150 #> # ℹ 2 more variables: `3yr_mean_of_perc_98` <dbl>, #> #   management_level_annual <chr> #>  #> $so2 #> # A tibble: 4 × 6 #>    year annual_mean_of_hourly management_level_hourly perc_99_of_daily_maxima #>   <dbl>                 <dbl> <chr>                                     <dbl> #> 1  2020                  75.3 Red                                         150 #> 2  2021                  74.8 Red                                         150 #> 3  2022                  75.7 Red                                         150 #> 4  2023                  75.2 Red                                         150 #> # ℹ 2 more variables: `3yr_mean_of_perc_99` <dbl>, #> #   management_level_annual <chr> #>"},{"path":"https://b-nilson.github.io/airquality/reference/get_abgov_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Download air quality station observations from the Alberta (Canada) Government — get_abgov_data","title":"Download air quality station observations from the Alberta (Canada) Government — get_abgov_data","text":"Air pollution monitoring Canada done individual Provinces/Territories, primarily part federal National Air Pollution Surveillance (NAPS) program. Province Alberta hosts hourly air quality observations public API, providing historic real-time raw data. [get_abgov_data] provides easy way retrieve observations using station name(s) (see [get_abgov_stations]) specified date date range.","code":""},{"path":"https://b-nilson.github.io/airquality/reference/get_abgov_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download air quality station observations from the Alberta (Canada) Government — get_abgov_data","text":"","code":"get_abgov_data(   stations = \"all\",   date_range = \"now\",   variables = \"all\",   raw = FALSE,   fast = FALSE,   quiet = FALSE,   stations_per_call = 2,   days_per_call = 10 )"},{"path":"https://b-nilson.github.io/airquality/reference/get_abgov_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download air quality station observations from the Alberta (Canada) Government — get_abgov_data","text":"stations (Optional) character vector one station names try get data desired (see [get_abgov_stations()]). Default \"\", .e. available stations. date_range (Optional). datetime vector (character vector dates \"YYYY-MM-DD HH:MM:SS\" format, \"now\" current hour) either 1 2 values. Providing single value return data hour , whereas two values return data (including) times. Dates \"backward-looking\", value \"2019-01-01 01:00\" covers \"2019-01-01 00:01\"- \"2019-01-01 01:00\". Default \"now\" (current hour). variables (Optional) character vector one variables try get data desired. raw (Optional). single logical (TRUE FALSE) value indicating raw data files desired (.e. without standardized format). Default FALSE. fast (Optional). single logical (TRUE FALSE) value indicating , possible, time-intensive code skipped parallel processing used. Default FALSE. quiet (Optional). single logical (TRUE FALSE) value indicating non-critical messages/warnings silenced. Default FALSE. stations_per_call (Optional) single numeric value indicating maximum number stations request per API call. API header requires station names passed comma-separated list, manyu stations may cause eror depending station name length. Default 1. days_per_call (Optional) single numeric value indicating maximum number days (per station) request per API call. safety measure prevent API timing requesting many days . Default 90.","code":""},{"path":"https://b-nilson.github.io/airquality/reference/get_abgov_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download air quality station observations from the Alberta (Canada) Government — get_abgov_data","text":"tibble hourly observation data desired station(s) date range available. Columns returned vary depending available data station(s). Dates UTC time \"backward-looking\", value \"2019-01-01 01:00\" covers \"2019-01-01 00:01\"- \"2019-01-01 01:00\".","code":""},{"path":[]},{"path":"https://b-nilson.github.io/airquality/reference/get_abgov_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download air quality station observations from the Alberta (Canada) Government — get_abgov_data","text":"","code":"# \\donttest{ get_abgov_data(quiet = TRUE) #> Warning: Failed to open 'https://data.environment.alberta.ca/Services/AirQualityV2/AQHI.svc/StationMeasurements?$filter=indexof%28%27t%27,%20StationName%29%20ge%20-1%20and%20ReadingDate%20ge%20datetime%272025-10-10T00%3A00%3A00%27%20and%20ReadingDate%20le%20datetime%272025-10-10T00%3A00%3A00%27%20and%20%28indexof%28%27Fine%20Particulate%20Matter%27,%20ParameterName%29%20ge%200%20or%20indexof%28%27Ozone%27,%20ParameterName%29%20ge%200%20or%20indexof%28%27Nitric%20Oxide%27,%20ParameterName%29%20ge%200%20or%20indexof%28%27Nitrogen%20Dioxide%27,%20ParameterName%29%20ge%200%20or%20indexof%28%27Total%20Oxides%20of%20Nitrogen%27,%20ParameterName%29%20ge%200%20or%20indexof%28%27Ammonia%27,%20ParameterName%29%20ge%200%20or%20indexof%28%27Sulphur%20Dioxide%27,%20ParameterName%29%20ge%200%20or%20indexof%28%27Total%20Reduced%20Sulphur%27,%20ParameterName%29%20ge%200%20or%20indexof%28%27Hydrogen%20Sulphide%27,%20ParameterName%29%20ge%200%20or%20indexof%28%27Carbon%20Monoxide%27,%20ParameterName%29%20ge%200%20or%20indexof%28%27Methane%27,%20ParameterName%29%20ge%200%20or%20indexof%28%27Total%20Hydrocarbons%27,%20ParameterName%29%20ge%200%20or%20indexof%28%27Non-methane%20Hydrocarbons%27,%20ParameterName%29%20ge%200%20or%20indexof%28%27Relative%20Humidity%27,%20ParameterName%29%20ge%200%20or%20indexof%28%27Outdoor%20Air%20Temperature%27,%20ParameterName%29%20ge%200%20or%20indexof%28%27Wind%20Direction%27,%20ParameterName%29%20ge%200%20or%20indexof%28%27Std.%20Dev.%20of%20Wind%20Direction%27,%20ParameterName%29%20ge%200%20or%20indexof%28%27Wind%20Speed%27,%20ParameterName%29%20ge%200%20or%20indexof%28%27Solar%20Radiation%27,%20ParameterName%29%20ge%200%20or%20indexof%28%27Barometric%20Pressure%20%28non-adjusted%29%27,%20ParameterName%29%20ge%200%29%20and%20Value%20ne%20null&$select=StationName,ParameterName,ReadingDate,Value&Connection%20Timeout=36000': The requested URL returned error: 400 #> Error in standardize_data_format(dplyr::bind_rows(qaqc_data, raw_data),     date_range = date_range, known_stations = known_stations,     desired_cols = names(unlist(unname(.abgov_columns))), id_cols = \"site_name\",     fast = fast, raw = raw): No data available before reformatting. # }"},{"path":"https://b-nilson.github.io/airquality/reference/get_abgov_stations.html","id":null,"dir":"Reference","previous_headings":"","what":"Download air quality station metadata from the Alberta (Canada) Government — get_abgov_stations","title":"Download air quality station metadata from the Alberta (Canada) Government — get_abgov_stations","text":"Air pollution monitoring Canada done individual Provinces/Territories, primarily part federal National Air Pollution Surveillance (NAPS) program. Province Alberta hosts hourly air quality metadata public API. [get_abgov_stations] provides easy way retrieve metadata (typically determine station names pass [get_abgov_data])","code":""},{"path":"https://b-nilson.github.io/airquality/reference/get_abgov_stations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download air quality station metadata from the Alberta (Canada) Government — get_abgov_stations","text":"","code":"get_abgov_stations(..., use_sf = FALSE, quiet = FALSE)"},{"path":"https://b-nilson.github.io/airquality/reference/get_abgov_stations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download air quality station metadata from the Alberta (Canada) Government — get_abgov_stations","text":"... used. compatibility metadata functions future expansion. use_sf (Optional) single logical (TRUE/FALSE) value indicating whether return spatial object. using `sf` package quiet (Optional). single logical (TRUE FALSE) value indicating non-critical messages/warnings silenced. Default FALSE.","code":""},{"path":"https://b-nilson.github.io/airquality/reference/get_abgov_stations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download air quality station metadata from the Alberta (Canada) Government — get_abgov_stations","text":"tibble metadata Alberta air quality monitoring stations.","code":""},{"path":[]},{"path":"https://b-nilson.github.io/airquality/reference/get_abgov_stations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download air quality station metadata from the Alberta (Canada) Government — get_abgov_stations","text":"","code":"# \\donttest{ # Normal usage get_abgov_stations() #> # A tibble: 93 × 11 #>    site_id site_name   type  description operated_by address airshed   lat   lng #>    <chr>   <chr>       <chr> <chr>       <chr>       <chr>   <chr>   <dbl> <dbl> #>  1 01AQY   Leduc Sens… Pilo…  NA         NA          NA      Albert…  53.2 -114. #>  2 01CAP   Woodcroft   Oper… \"Station o… http://cap… NA      Capita…  53.6 -114. #>  3 01CRAZ  Okotoks Wy… Port…  NA         https://cr… NA      Calgar…  50.7 -114. #>  4 01LICA  Cold Lake … Oper…  NA         http://www… NA      Lakela…  54.4 -110. #>  5 01PAML  Jasper      Port… \"Portable … NA          NA      Albert…  52.9 -118. #>  6 01PASZA Grande Pra… Oper…  NA         http://www… NA      Peace …  55.2 -119. #>  7 01SIA   Sherwood P… Oper…  NA         http://cap… NA      Strath…  53.5 -113. #>  8 01WBEA  Fort McKay  Oper… \"Fort McKa… http://www… Near t… Wood B…  57.2 -112. #>  9 02AQM   Calgary So… Oper…  NA         http://www… 49th A… Calgar…  51.0 -114. #> 10 02CAP   O’Morrow S… Oper… \"Not an AQ… https://ca… NA      Capita…  54.9 -113. #> # ℹ 83 more rows #> # ℹ 2 more variables: elev <dbl>, tz_local <chr> # if spatial object required get_abgov_stations(use_sf = TRUE) #> Simple feature collection with 93 features and 9 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -119.3968 ymin: 49.46218 xmax: -110.2331 ymax: 58.7084 #> Geodetic CRS:  WGS 84 #> # A tibble: 93 × 10 #>    site_id site_name         type  description operated_by address airshed  elev #>  * <chr>   <chr>             <chr> <chr>       <chr>       <chr>   <chr>   <dbl> #>  1 01AQY   Leduc Sensor      Pilo…  NA         NA          NA      Albert…    NA #>  2 01CAP   Woodcroft         Oper… \"Station o… http://cap… NA      Capita…   673 #>  3 01CRAZ  Okotoks Wylie     Port…  NA         https://cr… NA      Calgar…    NA #>  4 01LICA  Cold Lake South   Oper…  NA         http://www… NA      Lakela…    NA #>  5 01PAML  Jasper            Port… \"Portable … NA          NA      Albert…    NA #>  6 01PASZA Grande Prairie -… Oper…  NA         http://www… NA      Peace …    NA #>  7 01SIA   Sherwood Park     Oper…  NA         http://cap… NA      Strath…   709 #>  8 01WBEA  Fort McKay        Oper… \"Fort McKa… http://www… Near t… Wood B…    NA #>  9 02AQM   Calgary Southeast Oper…  NA         http://www… 49th A… Calgar…  1030 #> 10 02CAP   O’Morrow Station… Oper… \"Not an AQ… https://ca… NA      Capita…   571 #> # ℹ 83 more rows #> # ℹ 2 more variables: tz_local <chr>, geometry <POINT [°]> # }"},{"path":"https://b-nilson.github.io/airquality/reference/get_airnow_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Download air quality station observations from the US EPA ","title":"Download air quality station observations from the US EPA ","text":"AirNow US EPA nationwide voluntary program hosts non-validated air quality observation data stations US many countries globally. AirNow API provides access hourly raw observation files updated data received various monitoring agencies. Due real-time, non-validated nature data great care must taken using data support regulation, trends, guidance, government public decision making. highly recommended seek quality assured data possible. [get_airnow_data] provides easy way retrieve observations using AirNow's station IDs (see [get_airnow_stations]) specified date date range. Due API's file structure, data retrieval time proportional number hours data desired, regardless number stations variables requested.","code":""},{"path":"https://b-nilson.github.io/airquality/reference/get_airnow_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download air quality station observations from the US EPA ","text":"","code":"get_airnow_data(   stations = \"all\",   date_range = \"now\",   variables = \"all\",   raw = FALSE,   fast = FALSE,   quiet = FALSE )"},{"path":"https://b-nilson.github.io/airquality/reference/get_airnow_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download air quality station observations from the US EPA ","text":"stations (Optional). Either \"\" character vector specifying AQS IDs stations filter data . \"\" provided, data stations hour `date_range` still downloaded, data desired stations returned. Default \"\". date_range (Optional). datetime vector (character vector dates \"YYYY-MM-DD HH:MM:SS\" format, \"now\" current hour) either 1 2 values. Providing single value return data hour , whereas two values return data (including) times. Dates \"backward-looking\", value \"2019-01-01 01:00\" covers \"2019-01-01 00:01\"- \"2019-01-01 01:00\". Default \"now\" (current hour). variables (Optional). character vector one variables try get data . variables downloaded regardless parameter, data desired variables returned. Default \"\", .e. available variables. raw (Optional). single logical (TRUE FALSE) value indicating raw data files desired (.e. without standardized format). Default FALSE. fast (Optional). single logical (TRUE FALSE) value indicating , possible, time-intensive code skipped parallel processing used. Default FALSE. quiet (Optional). single logical (TRUE FALSE) value indicating non-critical messages/warnings silenced. Default FALSE.","code":""},{"path":"https://b-nilson.github.io/airquality/reference/get_airnow_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download air quality station observations from the US EPA ","text":"tibble hourly observation data desired station(s) date range available. Columns returned vary depending available data station(s). `raw = FALSE` (default), returned data standardized format units attached variable. Dates UTC time \"backward-looking\", value \"2019-01-01 01:00\" covers \"2019-01-01 00:01\"- \"2019-01-01 01:00\".","code":""},{"path":[]},{"path":"https://b-nilson.github.io/airquality/reference/get_airnow_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download air quality station observations from the US EPA ","text":"","code":"# \\donttest{ # Get data for all stations for first 3 hours (UTC) of Jan 2019 get_airnow_data(\"all\", c(\"2019-01-01 01:00:00\", \"2019-01-01 03:00:00\")) #> Data from the 'AirNow' repository are collected from the US Environmental Protection Agency and are NOT to be used commercially. Recent observations are not quality assured, and are intended for research and/or situational awareness (**NOT for regulatory decision making**). See `https://www.airnow.gov` for more information. #> 2025-10-10 06:03:34: Getting hourly files #> 2025-10-10 06:03:35: Getting station metadata #> Warning: There was 1 warning in `dplyr::mutate()`. #> ℹ In argument: `date_local = format(...)`. #> ℹ In group 36: `tz_local = NA`. #> Caused by warning in `with_tz.default()`: #> ! Unrecognized time zone 'NA' #> # A tibble: 10,129 × 22 #>    date_utc            date_local      site_id quality_assured pm25_1hr pm10_1hr #>    <dttm>              <chr>           <chr>   <lgl>            [ug/m3]  [ug/m3] #>  1 2019-01-01 01:00:00 2018-12-31 21:… 000010… FALSE                 NA       NA #>  2 2019-01-01 02:00:00 2018-12-31 22:… 000010… FALSE                 NA       NA #>  3 2019-01-01 03:00:00 2018-12-31 23:… 000010… FALSE                 NA       NA #>  4 2019-01-01 01:00:00 2018-12-31 21:… 000010… FALSE                  9       NA #>  5 2019-01-01 02:00:00 2018-12-31 22:… 000010… FALSE                  9       NA #>  6 2019-01-01 03:00:00 2018-12-31 23:… 000010… FALSE                  7       NA #>  7 2019-01-01 01:00:00 2018-12-31 21:… 000010… FALSE                 NA       NA #>  8 2019-01-01 02:00:00 2018-12-31 22:… 000010… FALSE                 NA       NA #>  9 2019-01-01 03:00:00 2018-12-31 23:… 000010… FALSE                 NA       NA #> 10 2019-01-01 01:00:00 2018-12-31 21:… 000010… FALSE                 NA       NA #> # ℹ 10,119 more rows #> # ℹ 16 more variables: bc_1hr [ug/m3], o3_1hr [ppb], no_1hr [ppb], #> #   no2_1hr [ppb], no2y_1hr [ppb], nox_1hr [ppb], noy_1hr [ppb], so2_1hr [ppb], #> #   co_1hr [ppb], rh_1hr [%], temp_1hr [°C], wd_1hr [°], ws_1hr [m/s], #> #   precip_1hr [mm], pressure_1hr [kPa], solar_1hr [W/m2]  # Get data for two specific stations for first 3 hours (UTC) of Jan 2019 get_airnow_data(c(\"000010102\", \"000010401\"), c(\"2019-01-01 01:00:00\", \"2019-01-01 03:00:00\")) #> Data from the 'AirNow' repository are collected from the US Environmental Protection Agency and are NOT to be used commercially. Recent observations are not quality assured, and are intended for research and/or situational awareness (**NOT for regulatory decision making**). See `https://www.airnow.gov` for more information. #> 2025-10-10 06:03:37: Getting hourly files #> 2025-10-10 06:03:37: Getting station metadata #> # A tibble: 6 × 6 #>   date_utc            date_local         site_id quality_assured pm25_1hr o3_1hr #>   <dttm>              <chr>              <chr>   <lgl>            [ug/m3]  [ppb] #> 1 2019-01-01 01:00:00 2018-12-31 21:30 … 000010… FALSE                 NA     35 #> 2 2019-01-01 02:00:00 2018-12-31 22:30 … 000010… FALSE                 NA     35 #> 3 2019-01-01 03:00:00 2018-12-31 23:30 … 000010… FALSE                 NA     35 #> 4 2019-01-01 01:00:00 2018-12-31 21:30 … 000010… FALSE                  9     37 #> 5 2019-01-01 02:00:00 2018-12-31 22:30 … 000010… FALSE                  9     36 #> 6 2019-01-01 03:00:00 2018-12-31 23:30 … 000010… FALSE                  7     36  # Get non-standardized data for all stations for first 3 hours (PST) of Jan 2019 date_range <- lubridate::ymd_h(c(\"2019-01-01 01:00:00\", \"2019-01-01 03:00:00\"), tz = \"Etc/GMT+8\") #> Warning: All formats failed to parse. No formats found. get_airnow_data(\"all\", date_range, raw = TRUE) #> Data from the 'AirNow' repository are collected from the US Environmental Protection Agency and are NOT to be used commercially. Recent observations are not quality assured, and are intended for research and/or situational awareness (**NOT for regulatory decision making**). See `https://www.airnow.gov` for more information. #> Error in if (any(date_range < within[1])) {    if (all(date_range < within[1])) {        stop(\"At least one date_range value must be on or after \",             format(within[1], \"%F %T %Z\"))    }    warning(\"`date_range` values must be on or after \", format(within[1],         \"%F %T %Z\"), \".\\n \", \"Set the `date_range` to a period from this date onwards to stop this warning.\")    date_range[date_range < within[1]] <- within[1]}: missing value where TRUE/FALSE needed # }"},{"path":"https://b-nilson.github.io/airquality/reference/get_airnow_stations.html","id":null,"dir":"Reference","previous_headings":"","what":"Download air quality station metadata from the US EPA ","title":"Download air quality station metadata from the US EPA ","text":"AirNow US EPA nationwide voluntary program hosts non-validated air quality observation data stations US many countries globally. AirNow API provides access daily metadata files available stations time. [get_airnow_stations] provides easy way retrieve metadata (typically determine station id's pass [get_airnow_data])","code":""},{"path":"https://b-nilson.github.io/airquality/reference/get_airnow_stations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download air quality station metadata from the US EPA ","text":"","code":"get_airnow_stations(   date_range = \"now\",   time_step = \"1 days\",   use_sf = FALSE,   quiet = FALSE )"},{"path":"https://b-nilson.github.io/airquality/reference/get_airnow_stations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download air quality station metadata from the US EPA ","text":"date_range (Optional). datetime vector (character vector dates \"YYYY-MM-DD HH:MM:SS\" format, \"now\" current hour) either 1 2 values. Providing single value return data hour , whereas two values return data (including) times. Dates \"backward-looking\", value \"2019-01-01 01:00\" covers \"2019-01-01 00:01\"- \"2019-01-01 01:00\". Default \"now\" (current hour). time_step (Optional). character string specifying time step check data within `date_range`. Default \"1 days\" (.e. check every day within `date_range` - may slow long date ranges). use_sf (Optional) single logical (TRUE/FALSE) value indicating whether return spatial object. using `sf` package quiet (Optional). single logical (TRUE FALSE) value indicating non-critical messages/warnings silenced. Default FALSE.","code":""},{"path":"https://b-nilson.github.io/airquality/reference/get_airnow_stations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download air quality station metadata from the US EPA ","text":"tibble metadata air quality monitoring stations AirNow.","code":""},{"path":[]},{"path":"https://b-nilson.github.io/airquality/reference/get_airnow_stations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download air quality station metadata from the US EPA ","text":"","code":"# \\donttest{ # Normal usage get_airnow_stations() #> # A tibble: 5,139 × 11 #>    site_id    site_name city    lat    lng  elev status operator tz_offset as_of #>    <chr>      <chr>     <chr> <dbl>  <dbl> <dbl> <chr>  <chr>        <dbl> <chr> #>  1 124CC0090… Edmonton… NA     53.5 -113.    0   Active Alberta…        -7 2025… #>  2 120860035  Perimeter MIAM…  25.8  -80.3   0   Active Florida…        -5 2025… #>  3 120110034  NCORE     BROW…  26.1  -80.3   0   Active Broward…        -5 2025… #>  4 482150043  Mission … HIDA…  26.2  -98.3  39.7 Active Texas C…        -6 2025… #>  5 047208510  JPN Site… NA     26.3  128.    0   Active Japan M…         9 2025… #>  6 047209080  JPN Site… NA     26.6  128.    0   Active Japan M…         9 2025… #>  7 120990009  Royal Pa… PALM…  26.7  -80.2   0   Inact… Florida…        -5 2025… #>  8 047301950  JPN Site… NA     26.9  128.    0   Active Japan M…         9 2025… #>  9 120813002  Port Man… MANA…  27.6  -82.5   0   Active Florida…        -5 2025… #> 10 483550032  Corpus C… NUEC…  27.8  -97.4   6.1 Active Texas C…        -6 2025… #> # ℹ 5,129 more rows #> # ℹ 1 more variable: tz_local <chr> # if spatial object required get_airnow_stations(use_sf = TRUE) #> Simple feature collection with 5139 features and 9 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -161.767 ymin: -34.5766 xmax: 144.36 ymax: 70.1319 #> Geodetic CRS:  WGS 84 #> # A tibble: 5,139 × 10 #>    site_id      site_name   city   elev status operator tz_offset as_of tz_local #>  * <chr>        <chr>       <chr> <dbl> <chr>  <chr>        <dbl> <chr> <chr>    #>  1 124CC0090140 Edmonton C… NA      0   Active Alberta…        -7 2025… America… #>  2 120860035    Perimeter   MIAM…   0   Active Florida…        -5 2025… America… #>  3 120110034    NCORE       BROW…   0   Active Broward…        -5 2025… America… #>  4 482150043    Mission C43 HIDA…  39.7 Active Texas C…        -6 2025… America… #>  5 047208510    JPN Site 0… NA      0   Active Japan M…         9 2025… Asia/To… #>  6 047209080    JPN Site 0… NA      0   Active Japan M…         9 2025… Asia/To… #>  7 120990009    Royal Palm… PALM…   0   Inact… Florida…        -5 2025… America… #>  8 047301950    JPN Site 0… NA      0   Active Japan M…         9 2025… Asia/To… #>  9 120813002    Port Manat… MANA…   0   Active Florida…        -5 2025… America… #> 10 483550032    Corpus Chr… NUEC…   6.1 Active Texas C…        -6 2025… America… #> # ℹ 5,129 more rows #> # ℹ 1 more variable: geometry <POINT [°]> # if data for some time in the past required get_airnow_stations(date_range = lubridate::ymd(\"2022-01-01\")) #> # A tibble: 4,746 × 11 #>    site_id   site_name   city    lat   lng  elev status operator tz_offset as_of #>    <chr>     <chr>       <chr> <dbl> <dbl> <dbl> <chr>  <chr>        <dbl> <chr> #>  1 017203140 JPN Site 0… NA     36.4  136.     0 Active Japan M…         9 2022… #>  2 019321030 JPN Site 0… NA     35.6  139.     0 Active Japan M…         9 2022… #>  3 020204510 JPN Site 0… NA     36.1  138.     0 Active Japan M…         9 2022… #>  4 022202150 JPN Site 0… NA     34.7  138.     0 Active Japan M…         9 2022… #>  5 022447010 JPN Site 0… NA     34.7  138.     0 Active Japan M…         9 2022… #>  6 028202530 JPN Site 0… NA     34.8  135.     0 Active Japan M…         9 2022… #>  7 028214510 JPN Site 0… NA     34.8  135.     0 Active Japan M…         9 2022… #>  8 030205020 JPN Site 0… NA     33.9  135.     0 Active Japan M…         9 2022… #>  9 033202070 JPN Site 0… NA     34.5  134.     0 Active Japan M…         9 2022… #> 10 035205030 JPN Site 0… NA     34.0  132.     0 Active Japan M…         9 2022… #> # ℹ 4,736 more rows #> # ℹ 1 more variable: tz_local <chr> # Or a range of time get_airnow_stations(date_range = lubridate::ymd(c(\"2022-01-01\",\"2022-01-05\"))) #> # A tibble: 4,751 × 11 #>    site_id    site_name city    lat    lng  elev status operator tz_offset as_of #>    <chr>      <chr>     <chr> <dbl>  <dbl> <dbl> <chr>  <chr>        <dbl> <chr> #>  1 80011G002  Estación… GUAN…  20.5 -101.   477. Active Secreta…        -6 2022… #>  2 800140009  Loma Dor… JALI…  20.6 -103.   502. Active Sistema…        -6 2022… #>  3 80011G018  Estación… GUAN…  21.0 -101.   610  Active Secreta…        -6 2022… #>  4 150031001  Honolulu  HONO…  21.3 -158.     0  Active Hawaii …       -10 2022… #>  5 682RIY010… Riyadh    NA     24.7   46.6    0  Active U.S. De…         3 2022… #>  6 484391062  Kennedal… TARR…  32.7  -97.2  195. Active Texas C…         0 2022… #>  7 482030002  Karnack … HARR…  32.7  -94.2    0  Active Texas C…        -6 2022… #>  8 060732000  Manzanit… SAN …  32.7 -116.     0  Active Manzani…        -8 2022… #>  9 061000000  NA        NA     32.7 -116.     0  Active Manzani…        -8 2022… #> 10 043201520  JPN Site… NA     32.8  131.     0  Active Japan M…         9 2022… #> # ℹ 4,741 more rows #> # ℹ 1 more variable: tz_local <chr> # }"},{"path":"https://b-nilson.github.io/airquality/reference/get_bcgov_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Download air quality station observations from the British Columbia (Canada) Government — get_bcgov_data","title":"Download air quality station observations from the British Columbia (Canada) Government — get_bcgov_data","text":"Air pollution monitoring Canada done individual Provinces/Territories, primarily part federal National Air Pollution Surveillance (NAPS) program. Province British Columbia hosts hourly air quality observations public FTP site, providing historic QA/QC'ed real-time raw data. Annual QA/QC'ed files available BC FTP site monitoring station, however usually 1-2 years date due QA/QC process. single file available station non-QA/QC'ed years, potentially 0-2+ years data depending time since last QA/QC'ed dataset created). [get_bcgov_data()] provides easy way retrieve observations using BC's station \"EMS IDs\"  (see [get_bcgov_stations()]) specified date date range. Due FTP site's file structure, data retrieval time proportional number stations requested well number years data (PST timezone) desired. can potentially longer retrieval times non-QA/QC'ed years depending current time since last QA/QC'ed year due larger file sizes.","code":""},{"path":"https://b-nilson.github.io/airquality/reference/get_bcgov_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download air quality station observations from the British Columbia (Canada) Government — get_bcgov_data","text":"","code":"get_bcgov_data(   stations = \"all\",   date_range = \"now\",   variables = \"all\",   raw = FALSE,   fast = FALSE,   quiet = FALSE )"},{"path":"https://b-nilson.github.io/airquality/reference/get_bcgov_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download air quality station observations from the British Columbia (Canada) Government — get_bcgov_data","text":"stations (Optional). character vector one station IDs (BC EMS IDs) try get data desired (see [get_bcgov_stations()]). Default \"\", .e. available stations. date_range (Optional). datetime vector (character vector dates \"YYYY-MM-DD HH:MM:SS\" format, \"now\" current hour) either 1 2 values. Providing single value return data hour , whereas two values return data (including) times. Dates \"backward-looking\", value \"2019-01-01 01:00\" covers \"2019-01-01 00:01\"- \"2019-01-01 01:00\". Default \"now\" (current hour). variables (Optional). character vector one variables try get data . variables downloaded regardless parameter, data desired variables returned. Default \"\", .e. available variables. raw (Optional). single logical (TRUE FALSE) value indicating raw data files desired (.e. without standardized format). Default FALSE. fast (Optional). single logical (TRUE FALSE) value indicating , possible, time-intensive code skipped parallel processing used. Default FALSE. quiet (Optional). single logical (TRUE FALSE) value indicating non-critical messages/warnings silenced. Default FALSE.","code":""},{"path":"https://b-nilson.github.io/airquality/reference/get_bcgov_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download air quality station observations from the British Columbia (Canada) Government — get_bcgov_data","text":"tibble hourly observation data desired station(s) date range available. Columns returned vary depending available data station(s). Dates UTC time \"backward-looking\", value \"2019-01-01 01:00\" covers \"2019-01-01 00:01\"- \"2019-01-01 01:00\".","code":""},{"path":[]},{"path":"https://b-nilson.github.io/airquality/reference/get_bcgov_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download air quality station observations from the British Columbia (Canada) Government — get_bcgov_data","text":"","code":"# \\donttest{ # For a single station station <- \"0450307\" # EMS IDs - see get_bcgov_stations() # For the years 2019 and 2020 date_range <- lubridate::ymd_h(c(\"2019-01-01 00\", \"2020-12-31 23\"), tz = \"Etc/GMT+8\") get_bcgov_data(station, date_range) #> Data from the 'BCgov' repository are collected from the British Columbia Ministry of Environment and Climate Change Strategy and are NOT to be used commercially. Recent observations are not quality assured, and are intended for research and/or situational awareness (**NOT for regulatory decision making**). See `https://www2.gov.bc.ca/gov/content/environment/air-land-water/air` for more information. #> 2025-10-10 06:03:50: Getting archived data #> # A tibble: 17,541 × 26 #>    date_utc            date_local      site_id quality_assured pm25_1hr pm10_1hr #>    <dttm>              <chr>           <chr>   <lgl>            [ug/m3]  [ug/m3] #>  1 2019-01-01 09:00:00 2019-01-01 01:… 0450307 TRUE                 2.7      9.6 #>  2 2019-01-01 10:00:00 2019-01-01 02:… 0450307 TRUE                 2.4     19.4 #>  3 2019-01-01 11:00:00 2019-01-01 03:… 0450307 TRUE                 2.6      6.9 #>  4 2019-01-01 12:00:00 2019-01-01 04:… 0450307 TRUE                 2.6      6.1 #>  5 2019-01-01 13:00:00 2019-01-01 05:… 0450307 TRUE                 2.2      6   #>  6 2019-01-01 14:00:00 2019-01-01 06:… 0450307 TRUE                 2.1      4.8 #>  7 2019-01-01 15:00:00 2019-01-01 07:… 0450307 TRUE                 3.1      6.4 #>  8 2019-01-01 16:00:00 2019-01-01 08:… 0450307 TRUE                 4        6.1 #>  9 2019-01-01 17:00:00 2019-01-01 09:… 0450307 TRUE                 3.9      4.2 #> 10 2019-01-01 18:00:00 2019-01-01 10:… 0450307 TRUE                 3.6      6.6 #> # ℹ 17,531 more rows #> # ℹ 20 more variables: o3_1hr [ppb], no_1hr [ppb], no2_1hr [ppb], #> #   nox_1hr [ppb], so2_1hr [ppb], trs_1hr [ppb], rh_1hr [%], temp_1hr [°C], #> #   wd_1hr [°], wd_unitvector_1hr [°], ws_1hr [m/s], ws_vector_1hr [m/s], #> #   pm25_1hr_instrument <fct>, pm10_1hr_instrument <fct>, #> #   o3_1hr_instrument <fct>, no_1hr_instrument <fct>, no2_1hr_instrument <fct>, #> #   nox_1hr_instrument <fct>, so2_1hr_instrument <fct>, …  # For multiple stations stations <- c(\"0450307\", \"E206898\") # EMS IDs - see get_bcgov_stations() # For first week of January 2019 date_range <- lubridate::ymd_h(c(\"2019-01-01 00\", \"2019-01-07 23\"), tz = \"Etc/GMT+8\") get_bcgov_data(stations, date_range) #> Data from the 'BCgov' repository are collected from the British Columbia Ministry of Environment and Climate Change Strategy and are NOT to be used commercially. Recent observations are not quality assured, and are intended for research and/or situational awareness (**NOT for regulatory decision making**). See `https://www2.gov.bc.ca/gov/content/environment/air-land-water/air` for more information. #> 2025-10-10 06:06:56: Getting archived data #> # A tibble: 167 × 23 #>    date_utc            date_local      site_id quality_assured pm25_1hr pm10_1hr #>    <dttm>              <chr>           <chr>   <lgl>            [ug/m3]  [ug/m3] #>  1 2019-01-01 09:00:00 2019-01-01 01:… 0450307 TRUE                 2.7      9.6 #>  2 2019-01-01 10:00:00 2019-01-01 02:… 0450307 TRUE                 2.4     19.4 #>  3 2019-01-01 11:00:00 2019-01-01 03:… 0450307 TRUE                 2.6      6.9 #>  4 2019-01-01 12:00:00 2019-01-01 04:… 0450307 TRUE                 2.6      6.1 #>  5 2019-01-01 13:00:00 2019-01-01 05:… 0450307 TRUE                 2.2      6   #>  6 2019-01-01 14:00:00 2019-01-01 06:… 0450307 TRUE                 2.1      4.8 #>  7 2019-01-01 15:00:00 2019-01-01 07:… 0450307 TRUE                 3.1      6.4 #>  8 2019-01-01 16:00:00 2019-01-01 08:… 0450307 TRUE                 4        6.1 #>  9 2019-01-01 17:00:00 2019-01-01 09:… 0450307 TRUE                 3.9      4.2 #> 10 2019-01-01 18:00:00 2019-01-01 10:… 0450307 TRUE                 3.6      6.6 #> # ℹ 157 more rows #> # ℹ 17 more variables: o3_1hr [ppb], no_1hr [ppb], no2_1hr [ppb], #> #   nox_1hr [ppb], so2_1hr [ppb], trs_1hr [ppb], rh_1hr [%], temp_1hr [°C], #> #   ws_1hr [m/s], pm25_1hr_instrument <fct>, pm10_1hr_instrument <fct>, #> #   o3_1hr_instrument <fct>, no_1hr_instrument <fct>, no2_1hr_instrument <fct>, #> #   nox_1hr_instrument <fct>, so2_1hr_instrument <fct>, #> #   trs_1hr_instrument <fct> # }"},{"path":"https://b-nilson.github.io/airquality/reference/get_bcgov_stations.html","id":null,"dir":"Reference","previous_headings":"","what":"Download air quality station metadata from the British Columbia (Canada) Government — get_bcgov_stations","title":"Download air quality station metadata from the British Columbia (Canada) Government — get_bcgov_stations","text":"Air pollution monitoring Canada done individual Provinces/Territories, primarily part federal National Air Pollution Surveillance (NAPS) program. Province British Columbia hosts air quality metadata public FTP site. [get_bcgov_stations] provides easy way retrieve metadata (typically determine station id's pass [get_bcgov_data])","code":""},{"path":"https://b-nilson.github.io/airquality/reference/get_bcgov_stations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download air quality station metadata from the British Columbia (Canada) Government — get_bcgov_stations","text":"","code":"get_bcgov_stations(date_range = \"now\", use_sf = FALSE, quiet = FALSE)"},{"path":"https://b-nilson.github.io/airquality/reference/get_bcgov_stations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download air quality station metadata from the British Columbia (Canada) Government — get_bcgov_stations","text":"date_range (Optional). datetime vector (character vector dates \"YYYY-MM-DD HH:MM:SS\" format, \"now\" current hour) either 1 2 values. Providing single value return data hour , whereas two values return data (including) times. Dates \"backward-looking\", value \"2019-01-01 01:00\" covers \"2019-01-01 00:01\"- \"2019-01-01 01:00\". Default \"now\" (current hour). use_sf (Optional) single logical (TRUE/FALSE) value indicating whether return spatial object. using `sf` package quiet (Optional). single logical (TRUE FALSE) value indicating non-critical messages/warnings silenced. Default FALSE.","code":""},{"path":"https://b-nilson.github.io/airquality/reference/get_bcgov_stations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download air quality station metadata from the British Columbia (Canada) Government — get_bcgov_stations","text":"tibble metadata British Columbia air quality monitoring stations.","code":""},{"path":[]},{"path":"https://b-nilson.github.io/airquality/reference/get_bcgov_stations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download air quality station metadata from the British Columbia (Canada) Government — get_bcgov_stations","text":"","code":"# \\donttest{ # Normal usage get_bcgov_stations() #> # A tibble: 404 × 9 #>    site_id naps_id site_name           lat   lng  elev date_created date_removed #>    <chr>     <int> <chr>             <dbl> <dbl> <int> <date>       <date>       #>  1 0110000      NA Victoria Air 1     48.4 -123.     0 1976-01-01   NA           #>  2 0110030      NA Victoria PAPS      48.4 -123.    22 1983-01-04   NA           #>  3 0110031      NA Victoria Royal R…  48.4 -123.     1 1998-03-03   NA           #>  4 0110063      NA Powell River Law…  49.9 -125.    20 1978-07-12   NA           #>  5 0110101      NA Port Alice Hospi…  50.4 -127.     0 1990-01-05   NA           #>  6 0110203      NA Gold River Pumph…  49.7 -126.     3 1977-01-02   NA           #>  7 0110258      NA Port Alberni       49.3 -125.     0 1978-01-04   NA           #>  8 0110501      NA Port Alice Trail…  50.4 -127.    10 1980-07-22   NA           #>  9 0220204  102301 Powell River Cra…  49.9 -125.   209 1990-07-01   2018-02-13   #> 10 0220205  102302 Powell River Wil…  49.9 -125.   136 1990-01-07   2019-10-16   #> # ℹ 394 more rows #> # ℹ 1 more variable: tz_local <chr> # if spatial object required get_bcgov_stations(use_sf = TRUE) #> Simple feature collection with 404 features and 7 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -132.2875 ymin: 48.3094 xmax: -114.8877 ymax: 58.8103 #> Geodetic CRS:  WGS 84 #> # A tibble: 404 × 8 #>    site_id naps_id site_name             elev date_created date_removed tz_local #>  * <chr>     <int> <chr>                <int> <date>       <date>       <chr>    #>  1 0110000      NA Victoria Air 1           0 1976-01-01   NA           America… #>  2 0110030      NA Victoria PAPS           22 1983-01-04   NA           America… #>  3 0110031      NA Victoria Royal Roads     1 1998-03-03   NA           America… #>  4 0110063      NA Powell River Lawn B…    20 1978-07-12   NA           America… #>  5 0110101      NA Port Alice Hospital      0 1990-01-05   NA           America… #>  6 0110203      NA Gold River Pumphouse     3 1977-01-02   NA           America… #>  7 0110258      NA Port Alberni             0 1978-01-04   NA           America… #>  8 0110501      NA Port Alice Trailer      10 1980-07-22   NA           America… #>  9 0220204  102301 Powell River Cranbe…   209 1990-07-01   2018-02-13   America… #> 10 0220205  102302 Powell River Wildwo…   136 1990-01-07   2019-10-16   America… #> # ℹ 394 more rows #> # ℹ 1 more variable: geometry <POINT [°]> # if data for past/specific years required get_bcgov_stations(years = 1998:2000) #> Error in get_bcgov_stations(years = 1998:2000): unused argument (years = 1998:2000) # }"},{"path":"https://b-nilson.github.io/airquality/reference/get_station_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Gather air quality observations from multiple networks and data sources — get_station_data","title":"Gather air quality observations from multiple networks and data sources — get_station_data","text":"general use function gathering air quality observation data standardized format desired monitoring networks data sources available package. either uses OpenStreetMap look polygon () specified location(s) user-provided polygons search monitoring stations within buffer distance polygon(s) specified networks/sources. data stations desired period downloaded, standardized, combined, returned. Currently following monitoring networks data sources available: FEM (Regulatory-grade \"Federal Equivalent Method\") monitors: AirNow (US/Global, non-validated, real-time) BCgov (B.C. (Canada), validated non-validated, real-time)","code":""},{"path":"https://b-nilson.github.io/airquality/reference/get_station_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gather air quality observations from multiple networks and data sources — get_station_data","text":"","code":"get_station_data(   locations,   date_range,   buffer_dist = 10,   networks = \"all\",   sources = \"all\",   quiet = FALSE )"},{"path":"https://b-nilson.github.io/airquality/reference/get_station_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gather air quality observations from multiple networks and data sources — get_station_data","text":"locations character vector least one value indicates location Open Street Map data desired (ie. \"Prince George, BC, Canada\", \"Canada\"), sf object polygon(s) indicating area interest. date_range (Optional). datetime vector (character vector dates \"YYYY-MM-DD HH:MM:SS\" format, \"now\" current hour) either 1 2 values. Providing single value return data hour , whereas two values return data (including) times. Dates \"backward-looking\", value \"2019-01-01 01:00\" covers \"2019-01-01 00:01\"- \"2019-01-01 01:00\". Default \"now\" (current hour). buffer_dist (Optional) single numeric value indicating distance buffer station search location (typically units km). Default 10. networks (Optional) character vector indicating monitoring networks get data . Default \"\". sources (Optional) character vector indicating data sources get data . Default \"\". quiet (Optional). single logical (TRUE FALSE) value indicating non-critical messages/warnings silenced. Default FALSE.","code":""},{"path":"https://b-nilson.github.io/airquality/reference/get_station_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gather air quality observations from multiple networks and data sources — get_station_data","text":"list two elements, first called \"stations\" sf POINT object stations specified monitoring networks data sources within specified location + buffer. second tibble hourly observation data date range stations IDs / networks / sources. columns date_utc, date_local, site_id, site_named, quality_assured always returned Observation columns named \"pollutant_averagingTime_unit\", present depending available data station(s) data sources. sources may additional columns included found others.","code":""},{"path":"https://b-nilson.github.io/airquality/reference/get_station_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gather air quality observations from multiple networks and data sources — get_station_data","text":"","code":"# \\donttest{ # Get data for all stations within 10 km of Fort St. John, BC #  for the first hour of Feb 2019 get_station_data(locations = \"Fort St. John, BC, Canada\", date_range = \"2019-02-01 01:00:00\") #> Warning: Adding a search buffer of 10 km to each location (see arg `buffer_dist`) #> FEM - BCgov : 4 station(s) to check for data #> Data from the 'BCgov' repository are collected from the British Columbia Ministry of Environment and Climate Change Strategy and are NOT to be used commercially. Recent observations are not quality assured, and are intended for research and/or situational awareness (**NOT for regulatory decision making**). See `https://www2.gov.bc.ca/gov/content/environment/air-land-water/air` for more information. #> Error in standardize_data_format(dplyr::bind_rows(archived_data, realtime_data), : No data available before reformatting. #> FEM - AirNow : 1 station(s) to check for data #> Data from the 'AirNow' repository are collected from the US Environmental Protection Agency and are NOT to be used commercially. Recent observations are not quality assured, and are intended for research and/or situational awareness (**NOT for regulatory decision making**). See `https://www.airnow.gov` for more information. #> 2025-10-10 06:08:40: Getting hourly files #> 2025-10-10 06:08:40: Getting station metadata #> Error in data_fun(stations = site_ids, date_range, quiet = quiet): No data available for desired stations during specified date range. #> $stations #> Simple feature collection with 5 features and 4 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -120.8561 ymin: 56.23179 xmax: -120.8094 ymax: 56.25772 #> Geodetic CRS:  WGS 84 #> # A tibble: 5 × 5 #>   site_id       site_name               network source             geometry #>   <chr>         <chr>                   <chr>   <chr>           <POINT [°]> #> 1 E243516       Fort St John NP Cultur… FEM     BCgov   (-120.8489 56.2458) #> 2 E299830       Fort St John Key Learn… FEM     BCgov  (-120.8561 56.24472) #> 3 E304550       Fort St John 85th Aven… FEM     BCgov  (-120.8539 56.23179) #> 4 FSJ OGC CAMEL Fort St John Hospital   FEM     BCgov  (-120.8094 56.25772) #> 5 000105501     Fort St John NP Cultur… FEM     AirNow  (-120.8489 56.2458) #>  #> $data #> # A tibble: 0 × 0 #>   # Get data for all FEM stations within 25 km of 2 BC cities from AirNow only #  for the first hour of Feb 2019 get_station_data(c(\"Vanderhoof BC, Canada\", \"Kamloops, BC, Canada\"),   \"2019-02-01 01:00:00\",   buffer_dist = 25,   networks = \"FEM\", sources = \"AirNow\" ) #> No polygonal boundary for Vanderhoof BC, Canada. Returning the bounding boxes. #> Warning: Adding a search buffer of 25 km to each location (see arg `buffer_dist`) #> FEM - AirNow : 2 station(s) to check for data #> Data from the 'AirNow' repository are collected from the US Environmental Protection Agency and are NOT to be used commercially. Recent observations are not quality assured, and are intended for research and/or situational awareness (**NOT for regulatory decision making**). See `https://www.airnow.gov` for more information. #> 2025-10-10 06:08:45: Getting hourly files #> 2025-10-10 06:08:45: Getting station metadata #> $stations #> Simple feature collection with 2 features and 4 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -120.3975 ymin: 50.6747 xmax: -120.3339 ymax: 50.6978 #> Geodetic CRS:  WGS 84 #> # A tibble: 2 × 5 #>   site_id   site_name                 network source            geometry #>   <chr>     <chr>                     <chr>   <chr>          <POINT [°]> #> 1 000100401 Kamloops Federal Building FEM     AirNow (-120.3339 50.6747) #> 2 000100402 Kamloops Brocklehurst     FEM     AirNow (-120.3975 50.6978) #>  #> $data #> # A tibble: 1 × 7 #>   date_utc            date_local site_id quality_assured pm25_1hr source network #>   <dttm>              <chr>      <chr>   <lgl>            [ug/m3] <chr>  <chr>   #> 1 2019-02-01 01:00:00 2019-01-3… 000100… FALSE                6.8 AirNow FEM     #>  # }"},{"path":"https://b-nilson.github.io/airquality/reference/purpleair_api.html","id":null,"dir":"Reference","previous_headings":"","what":"Interface with the PurpleAir API — purpleair_api","title":"Interface with the PurpleAir API — purpleair_api","text":"PurpleAir provides access observations network low-cost PM2.5 monitors points-based API system. New accounts start 1M points, request cost 1-5 points plus number rows times total column cost (depends column, typically 1-2 points per column). Point can purchased develop.purpleair.com cost less buying bulk. information, see: api.purpleair.com order retrieve data must: make account develop.purpleair.com (google account required, can made using email) create new project, click created add two API keys, 1 reading (getting data), 1 writing (making groups sensors) (Optional) open .Renviron editing (can use usethis::edit_r_environ(\"project\") installing usethis package) (Optional) add keys 2 seperate lines format: purpleair_api_read = \"-API-KEY-\" (Optional) refer keys using read_key = Sys.getenv(\"purpleair_api_read\") keep API key secure purpleair_api() requires either read write key (depending trying ), channel name make request , (depending request type want make) named list parameters. See api.purpleair.com parameters avalailable request type. Based provided channel/parameters, request estimated points cost displayed, request made desired. Set quiet TRUE silence always run request (caution, requests may cost lot points)","code":""},{"path":"https://b-nilson.github.io/airquality/reference/purpleair_api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interface with the PurpleAir API — purpleair_api","text":"","code":"purpleair_api(   read_key = NULL,   write_key = NULL,   channel,   parameters = NULL,   quiet = FALSE,   estimate_cost = TRUE )"},{"path":"https://b-nilson.github.io/airquality/reference/purpleair_api.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interface with the PurpleAir API — purpleair_api","text":"read_key (Optional) single character value PurpleAir API read key (see develop.purpleair.com). NULL, write_key must provided. write_key (Optional) single character value PurpleAir API write key (see develop.purpleair.com). NULL, read_key must provided. channel single character value indicating API channel use (Currently supported: keys, organization, sensors, groups) parameters (Optional) named list containing paramaters supplied API request (see api.purpleair.com). quiet (Optional) single logical (TRUE FALSE) value indicating non-critical messages/warnings silenced. estimate_cost (Optional) single logical (TRUE FALSE) value indicating cost request estimated. Default TRUE.","code":""},{"path":"https://b-nilson.github.io/airquality/reference/purpleair_api.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interface with the PurpleAir API — purpleair_api","text":"channel either \"keys\" \"organization\", invalid/missing parameters, list request results sensors groups channel, tibble data returned request","code":""},{"path":[]},{"path":"https://b-nilson.github.io/airquality/reference/purpleair_api.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interface with the PurpleAir API — purpleair_api","text":"","code":"if (FALSE) { # \\dontrun{ read_key <- Sys.getenv(\"purpleair_api_read\") write_key <- Sys.getenv(\"purpleair_api_write\")  parameters <- list( # see api.purpleair.com for more   nwlat = 53.93, nwlng = -122.77,   selat = 53.9, selng = -122.73,   fields = \"temperature\",   sensor_index = 198385,   start_timestamp = Sys.time() - lubridate::hours(1) )   # Get Sensors Data # test = purpleair_api(read_key = read_key, channel = \"sensors\", #   parameters = parameters[1:5])  # Get Sensor Data # test = purpleair_api(read_key = read_key, channel = \"sensors\", #  parameters = parameters[5:6])  # Get Sensor History # test = purpleair_api(read_key = read_key, channel = \"sensors\", # parameters = parameters[5:7]) } # }"},{"path":"https://b-nilson.github.io/airquality/reference/taylor_diagram.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Taylor diagram to assess model performance using the relationship between correlation, standard deviation, and centered RMS error. — taylor_diagram","title":"Create a Taylor diagram to assess model performance using the relationship between correlation, standard deviation, and centered RMS error. — taylor_diagram","text":"Blah Blah Blah Taylor (2001) Blah Blah Blah TODO: Add description","code":""},{"path":"https://b-nilson.github.io/airquality/reference/taylor_diagram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Taylor diagram to assess model performance using the relationship between correlation, standard deviation, and centered RMS error. — taylor_diagram","text":"","code":"taylor_diagram(   dat,   data_cols = c(obs = \"obs\", mod = \"mod\"),   group_by,   facet_by = NULL,   facet_rows = 1,   obs_colour = \"purple\",   obs_shape = 16,   obs_size = 1.5,   obs_stroke = 1,   obs_label = \"Obs.\",   mod_colours = \"default\",   mod_fills = \"default\",   mod_shapes = \"default\",   mod_size = 1.5,   mod_stroke = 1,   cor_minimum = NULL,   cor_step = 0.1,   cor_colour = \"grey30\",   cor_linetype = \"longdash\",   cor_label = \"Correlation\",   rmse_minimum = 0,   rmse_step = \"default\",   rmse_colour = \"brown\",   rmse_linetype = \"dotted\",   rmse_label = \"Centered RMS Error\",   rmse_label_pos = \"default\",   sd_maximum = NULL,   sd_step = \"default\",   sd_colour = \"black\",   sd_linetypes = c(obs = \"dashed\", other = \"dashed\"),   sd_label = \"Standard Deviation\",   plot_padding = 0.5,   labels_padding = 2 )"},{"path":"https://b-nilson.github.io/airquality/reference/taylor_diagram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Taylor diagram to assess model performance using the relationship between correlation, standard deviation, and centered RMS error. — taylor_diagram","text":"dat Paired observation model data (least) columns `data_cols`, `group_by`, (provided) `facet_by`. data_cols (Optional) character vector 2 values indication column names `dat` get observed modelled values. Default assumes columns \"obs\" \"mod\" exist. group_by character vector 1 3 column names use groups. first value used `colour`, second (present) used `shape`, third (present) used `fill` adding model data points. names present used corresponding legend titles. facet_by (Optional) character vector 1 2 column names use facets `ggplot2::facet_wrap()`. names present used corresponding facet titles. Default (NULL) facet plot. facet_rows (Optional) single numeric value indicating number rows use facetting `facet_by` values provided. Default single row. obs_colour, obs_shape, obs_size, obs_stroke (Optional) single value indicating colour/shape/size/stroke observed data point. Default full-colour purple circle. obs_label (Optional) single character value indicating text display observed point. Default \"Obs.\" mod_colours, mod_shapes, mod_fills (Optional) named vector colours/shapes use provided `group_by` names correspond values group column assign colour/shape (.e `c(\"group_1\" = \"red\", ...)`). Default uses \"good looking\" colours/shapes/fills. mod_size, mod_stroke (Optional) single numeric value indicating size/stroke model data points. Default matches size/stroke observed point. cor_minimum (Optional) single numeric value indicating minimum correlation value display (-1 +1). Default uses nearest 0.1 minimum correlation. cor_step (Optional) single value indicating spacing correlation line. Default step 0.1 (10%). cor_colour, cor_linetype (Optional) single value indicating colour/linetype correlation grid lines. Default grey long-dash lines. cor_label (Optional) single character value indicating text display correlation axis title. Default \"Correlation\". rmse_minimum (Optional) single numeric value indicating minimum rmse line display (>= 0). Default 0 (meaning first line display `rmse_step`). rmse_step (Optional) single value indicating spacing rmse line. Default produces approximatley 4 lines \"pretty\" spacing. rmse_colour, rmse_linetype (Optional) single value indicating colour/linetype rmse circles originating observed point. Default brown dotted lines. rmse_label (Optional) single character value indicating text display RMSE axis title. Default \"Centered RMS Error\". rmse_label_pos (Optional) single value (0-1) indicating location labels rmse circles (0 == far left along x-axis, 0.5 = top cirles, 1 = far right along x-axis). Default 10% greater minimum correlation. sd_maximum (Optional) single numeric value indicating maximum standard deviation value display (>= 0). Default nearest \"pretty\" value maximum standard deviation. sd_step (Optional) single value indicating spacing standard deviation line. Default produces approximatley 4 lines \"pretty\" spacing. sd_colour (Optional) single value indicating colour standard deviation arcs. Default black. sd_linetypes (Optional) character vector 2 line types names `\"obs\", \"\"` indicating line types standard deviation arcs. Default dashed observed line, dotted others. sd_label (Optional) single character value indicating text display standard deviation axis title. Default \"Standard Deviation\". plot_padding, labels_padding (Optional) single numeric value indicating much spacing (standard deviation units) add text labels. Default 2 , likely needs adjusted depeding figure size number facets.","code":""},{"path":"https://b-nilson.github.io/airquality/reference/taylor_diagram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Taylor diagram to assess model performance using the relationship between correlation, standard deviation, and centered RMS error. — taylor_diagram","text":"ggplot object taylor diagram.","code":""},{"path":[]},{"path":"https://b-nilson.github.io/airquality/reference/taylor_diagram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Taylor diagram to assess model performance using the relationship between correlation, standard deviation, and centered RMS error. — taylor_diagram","text":"","code":"if (FALSE) { # \\dontrun{ # Make test data data <- as.data.frame(datasets::ChickWeight) |> # TODO: make better test dataset   dplyr::filter(.data$Chick == 1) |>   tidyr::pivot_wider(names_from = \"Chick\", values_from = \"weight\") |>   dplyr::full_join(     as.data.frame(datasets::ChickWeight) |>       dplyr::filter(.data$Chick != 1)   ) |>   dplyr::rename(obs = `1`, mod = \"weight\") |>   dplyr::mutate(Chick = factor(round(as.numeric(.data$Chick) / 20))) # Basic usage taylor_diagram(data, group_by = c(Diet = \"Diet\", Chick = \"Chick\")) # Force 0 on left axis taylor_diagram(data,   group_by = c(Diet = \"Diet\", Chick = \"Chick\"),   cor_minimum = 0, rmse_label_pos = 130 ) # TODO: fix this # Change colours / shapes taylor_diagram(data,   group_by = c(Diet = \"Diet\", Chick = \"Chick\"),   mod_colours = c(\"AB\" = \"pink\", \"BC\" = \"blue\"),   mod_fills = c(\"EGG\" = \"white\", \"PA\" = \"darkgrey\"), # TODO: update this   mod_shapes = c(\"FALSE\" = 23, \"TRUE\" = 22),   mod_size = 4, mod_stroke = 6,   obs_colour = \"brown\", obs_shape = 23, obs_size = 6,   cor_colour = \"orange\", cor_linetype = \"dotdash\",   rmse_colour = \"green\", rmse_linetype = \"longdash\",   sd_colour = \"purple\", sd_linetypes = c(obs = \"solid\", other = \"dashed\") ) # Adjust text positioning taylor_diagram(data,   group_by = c(Diet = \"Diet\", Chick = \"Chick\"),   plot_padding = 4, labels_padding = 1, rmse_label_pos = 0.7 ) } # }"},{"path":"https://b-nilson.github.io/airquality/reference/tile_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create tiled summary diagrams to assess relationships in a variable based on two grouping variables — tile_plot","title":"Create tiled summary diagrams to assess relationships in a variable based on two grouping variables — tile_plot","text":"TODO: Add description","code":""},{"path":"https://b-nilson.github.io/airquality/reference/tile_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create tiled summary diagrams to assess relationships in a variable based on two grouping variables — tile_plot","text":"","code":"tile_plot(   obs,   x,   y,   z,   date_col = \"date_utc\",   facet_by = NULL,   facet_rows = 1,   facet_scales = \"fixed\",   FUN = mean,   ... )"},{"path":"https://b-nilson.github.io/airquality/reference/tile_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create tiled summary diagrams to assess relationships in a variable based on two grouping variables — tile_plot","text":"obs Observation data.frame (least) columns `data_cols` (provided) `facet_by`. x, y, z charactor values indicating column names `obs` summarise (`x` `y`) values (`z`) using `FUN`. `x` `y` one `\"year\", \"quarter\", \"month\", \"day\", \"wday\", \"hour\", \"minute\", \"second\"`, columns present `obs` calulcated based `date_col` date_col (Optional) single charactor value indicating column name `obs` containing observation dates. Default assume \"date_utc\" exists. facet_by (Optional) character vector 1 2 column names use facets `ggplot2::facet_wrap()`. names present used corresponding facet titles. Default (NULL) facet plot. facet_rows (Optional) single numeric value indicating number rows use facetting `facet_by` values provided. Default single row. facet_scales (Optional) single character value indicating wheter facet x/y scales \"fixed\", \"free\", \"free_y\", \"free_x\". Default \"fixed\" (panel matching x/y scales). FUN (Optional) function use summarise `z` values - must take vector values first argument return single value. Default calculate `mean` value. ... named arguments passed `FUN()` summarizing `z` values.","code":""},{"path":"https://b-nilson.github.io/airquality/reference/tile_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create tiled summary diagrams to assess relationships in a variable based on two grouping variables — tile_plot","text":"ggplot object tile plot.","code":""},{"path":[]},{"path":"https://b-nilson.github.io/airquality/reference/tile_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create tiled summary diagrams to assess relationships in a variable based on two grouping variables — tile_plot","text":"","code":"if (FALSE) { # \\dontrun{ # Make test data date_range <- c(\"2019-02-01 00\", \"2019-03-28 23\") obs <- get_station_data(\"Vanderhoof, BC, Canada\", date_range, sources = \"BCgov\")$data |>   dplyr::select(\"date_utc\", \"site_id\", \"pm25_1hr_ugm3\") |>   dplyr::distinct() # Basic usage gg <- obs |> tile_plot(   x = \"day\",   y = \"hour\",   z = \"pm25_1hr_ugm3\",   facet_by = c(\"Year\" = \"year\", \"Month\" = \"month\") ) # Change titles gg + ggplot2::labs(   fill = \"Legend Title\", title = \"Plot Title\",   subtitle = \"Plot Subtitle\", caption = \"Plot Caption\" ) } # }"},{"path":"https://b-nilson.github.io/airquality/reference/wind_rose.html","id":null,"dir":"Reference","previous_headings":"","what":"Create wind rose diagrams to assess patterns in wind speed and direction — wind_rose","title":"Create wind rose diagrams to assess patterns in wind speed and direction — wind_rose","text":"TODO: Add description","code":""},{"path":"https://b-nilson.github.io/airquality/reference/wind_rose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create wind rose diagrams to assess patterns in wind speed and direction — wind_rose","text":"","code":"wind_rose(   obs,   data_cols = c(ws = \"ws_1hr\", wd = \"wd_1hr\"),   facet_by = NULL,   facet_rows = 1,   wd_nbins = c(16, 8, 4)[1],   ws_min = 0,   ws_step = 2,   fills = \"default\",   colour = \"black\",   alpha = 0.8,   bar_width = 1,   ... )"},{"path":"https://b-nilson.github.io/airquality/reference/wind_rose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create wind rose diagrams to assess patterns in wind speed and direction — wind_rose","text":"obs Observation data.frame (least) columns `data_cols` (provided) `facet_by`. data_cols (Optional) character vector 2 values indicating column names `obs` get wind speed (ws) wind direction (wd) values. Default assumes columns \"ws_1hr\" \"wd_1hr\" exist. facet_by (Optional) character vector 1 2 column names use facets `ggplot2::facet_wrap()`. names present used corresponding facet titles. Default (NULL) facet plot. facet_rows (Optional) single numeric value indicating number rows use facetting `facet_by` values provided. Default single row. wd_nbins (Optional) single value indicating number wind direction bars plot. Must either 16 (N, NNE, NE, ENE, ...), 8 (N, NE, E, SE, ...), 4 (N, E, S, W). Default 16. ws_min (Optional) single value indicating minimum wind speed value include diagram. Default 0 m/s. ws_step (Optional) single value indicating spacing wind speed category. Default step 2 m/s. fills (Optional) vector colours use wind speed breaks Default uses \"good looking\" colours colour (Optional) single character value indicating colour use . Default step 2 m/s. alpha (Optional) single value 0-1 indicating alpha (opacity) wind speed fill colours. Default step 2 m/s. bar_width (Optional) single value 0-1 indicating relative width observation data bars. Default full width (=1). ... named argument passed ggplot2::geom_col() drawing observation data (See ?ggplot2::geom_col possible arguments)","code":""},{"path":"https://b-nilson.github.io/airquality/reference/wind_rose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create wind rose diagrams to assess patterns in wind speed and direction — wind_rose","text":"ggplot object wind rose.","code":""},{"path":[]},{"path":"https://b-nilson.github.io/airquality/reference/wind_rose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create wind rose diagrams to assess patterns in wind speed and direction — wind_rose","text":"","code":"if (FALSE) { # \\dontrun{ # Make test data date_range <- lubridate::ymd_h(c(\"2019-02-01 00\", \"2019-02-28 23\"), tz = \"America/Vancouver\") obs <- get_station_data(\"Vanderhoof, BC, Canada\", date_range, sources = \"BCgov\")$data |>   dplyr::select(\"date_local\", \"site_id\", \"ws_1hr_ms\", \"wd_1hr_degrees\") |>   dplyr::distinct() # Basic usage gg <- wind_rose(obs, facet_by = c(Site = \"site_id\")) # Change titles gg + ggplot2::labs(   fill = \"Legend Title\", title = \"Plot Title\",   subtitle = \"Plot Subtitle\", caption = \"Plot Caption\" ) } # }"}]
